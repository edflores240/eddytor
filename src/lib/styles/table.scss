/* Modern table styling for Eddytor */
@use 'sass:map';
@use '_variables' as *;

:global {
  /* Modern table styling with clean design */
  .ProseMirror table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin: $spacing-6 0;
    font-size: $font-size-sm;
    border: none;
    transition: all 0.2s ease;
    border-radius: $radius-lg;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    border:  none;

    tbody {
      overflow-y: hidden;
    }
    
    /* Table cells */
    th, td {
      position: relative;
      min-width: 100px;
      border: none;
      border-bottom: 1px solid rgba(map.get($light, 'border-light'), 1);
      padding: $spacing-3 $spacing-4;
      vertical-align: top;
      box-sizing: border-box;
      transition: all 0.2s ease;
      line-height: 1.5;
      color: map.get($light, 'text-primary');
      background-color: transparent;
      
      /* Dark mode */
      .dark & {
        border-bottom-color: rgba(map.get($dark, 'border-medium'), 1);
        color: map.get($dark, 'text-primary');
      }
      
      /* Content styling */
      p {
        margin: 0;
      }
    }
    
    /* Header cells */
    th {
      font-weight: $font-weight-medium;
      background-color: rgba(map.get($light, 'bg-secondary'), 0.5);
      color: map.get($light, 'text-secondary');
      font-size: 0.85em;
      letter-spacing: 0.02em;
      position: relative;
      padding: $spacing-3 $spacing-4;
      border-bottom: 1.5px solid rgba(map.get($light, 'border-medium'), 1);
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: left;
      
      &::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(map.get($light, 'accent-primary'), 0.05);
        opacity: 0;
        transition: opacity 0.2s ease;
        border-top-left-radius: $radius-md;
        border-top-right-radius: $radius-md;
      }
      
      /* Column highlight on header hover */
      &:hover {
        color: map.get($light, 'text-primary');
        border-bottom-color: rgba(map.get($light, 'accent-primary'), 1);
        
        &::before {
          opacity: 1;
        }
      }
      
      .dark & {
        background-color: rgba(map.get($dark, 'bg-secondary'), 0.5);
        color: map.get($dark, 'text-secondary');
        border-bottom-color: rgba(map.get($dark, 'border-medium'), 1);
        
        &::before {
          background: rgba(map.get($dark, 'accent-primary'), 0.05);
        }
        
        &:hover {
          color: map.get($dark, 'text-primary');
          border-bottom-color: rgba(map.get($dark, 'accent-primary'), 1);
        }
      }
    }
    
    /* Column highlighting effect */
    th:hover {
      position: relative;
      z-index: 1;
    }
    
    /* Highlight entire column when header is hovered */
    th:hover::after {
      content: "";
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      height: 9999px;
      background: rgba(map.get($light, 'accent-primary'), 0.03);
      pointer-events: none;
      z-index: -1;
      
      .dark & {
        background: rgba(map.get($dark, 'accent-primary'), 0.04);
      }
    }

    /* Row hover effect */
    tbody tr {
      transition: background-color 0.15s ease;
      
      &:hover {
        background-color: rgba(map.get($light, 'bg-hover'), 0.05);
        
        .dark & {
          background-color: rgba(map.get($dark, 'bg-hover'), 0.05);
        }
      }
    }
    
    /* Subtle zebra striping for better readability */
    tbody tr:nth-child(even) {
      background-color: rgba(map.get($light, 'bg-secondary'), 0.2);
      
      .dark & {
        background-color: rgba(map.get($dark, 'bg-secondary'), 0.2);
      }
    }
    
    /* Selected cell styling */
    .selectedCell {
      background-color: rgba(map.get($light, 'accent-primary'), 0.08) !important;
      border-bottom-color: rgba(map.get($light, 'accent-primary'), 1) !important;
      position: relative;
    
      &::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border: 2px solid rgba(map.get($light, 'accent-primary'), 0.5);
        pointer-events: none;
        z-index: 1;
      }
      
      .dark & {
        background-color: rgba(map.get($dark, 'accent-primary'), 0.1) !important;
        border-bottom-color: rgba(map.get($dark, 'accent-primary'), 1) !important;
        
        &::after {
          border-color: rgba(map.get($dark, 'accent-primary'), 0.7);
        }
      }
    }
    
    /* First row styling */
    tr:first-child td, tr:first-child th {
      border-top: none;
    }
    
    /* Last row styling */
    // tr:last-child td, tr:last-child th {
    //   border-bottom: none;
    // }
    
    /* First column styling */
    tr td:first-child, tr th:first-child {
      border-left: none;
    }
    
    /* Last column styling */
    tr td:last-child, tr th:last-child {
      border-right: none;
    }
  }
  
  /* Table controls - modern design */
  .tableControls {
    position: absolute;
    display: flex;
    align-items: center;
    gap: $spacing-1;
    background: rgba(255, 255, 255, 0.98);
    border-radius: $radius-lg;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08), 0 2px 8px rgba(0, 0, 0, 0.04);
    padding: $spacing-2;
    z-index: 30;
    transition: all 0.2s cubic-bezier(0.16, 1, 0.3, 1);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(map.get($light, 'border-light'), 0.2);
    transform-origin: center top;
    
    &:hover {
      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.1), 0 2px 8px rgba(0, 0, 0, 0.06);
    }
    
    /* Control buttons */
    button {
      background: transparent;
      border: 0;
      width: 36px;
      height: max-content;
      border-radius: $radius-md;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      color: rgba(map.get($light, 'text-secondary'), 0.8);
      transition: all 0.15s ease;
      position: relative;
      overflow: hidden;
      
      &:hover {
        color: map.get($light, 'accent-primary');
        background: rgba(map.get($light, 'accent-primary'), 0.08);
      }
      
      &:active {
        transform: scale(0.95);
        background: rgba(map.get($light, 'accent-primary'), 0.12);
      }
      
      svg {
        width: 18px;
        height: 18px;
        position: relative;
        z-index: 1;
      }
      
      /* Modern tooltip */
      &:hover::after {
        content: attr(title);
        position: absolute;
        bottom: -32px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.85);
        color: white;
        font-size: 12px;
        padding: 4px 8px;
        border-radius: 4px;
        white-space: nowrap;
        pointer-events: none;
        z-index: 40;
        font-weight: 500;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
      }
    }
    
    /* Separator */
    .separator {
      width: 1px;
      height: 20px;
      background: rgba(map.get($light, 'border-light'), 0.3);
      margin: 0 $spacing-1;
    }
    
    /* Dark mode */
    .dark & {
      background: rgba(map.get($dark, 'bg-secondary'), 0.95);
      border-color: rgba(map.get($dark, 'border-medium'), 0.3);
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2), 0 2px 8px rgba(0, 0, 0, 0.1);
      
      button {
        color: rgba(map.get($dark, 'text-secondary'), 0.8);
        
        &:hover {
          color: map.get($dark, 'accent-primary');
          background: rgba(map.get($dark, 'accent-primary'), 0.15);
        }
        
        &:active {
          background: rgba(map.get($dark, 'accent-primary'), 0.2);
        }
        
        &:hover::after {
          background: rgba(0, 0, 0, 0.9);
          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.4);
        }
      }
      
      .separator {
        background: rgba(map.get($dark, 'border-medium'), 0.4);
      }
    }
  }
  
  /* Column resize handle - improved */
  .column-resize-handle {
    position: absolute;
    right: -2px;
    top: 0;
    bottom: 0;
    width: 4px;
    background-color: rgba(map.get($light, 'accent-primary'), 0.7);
    cursor: col-resize;
    opacity: 0;
    transition: all 0.2s ease;
    z-index: 30;
    border-radius: 2px;
    
    &:hover, &.active {
      opacity: 0.9 !important;
    }
    
    &.dragging {
      opacity: 1 !important;
      width: 3px;
      right: -1.5px;
      background-color: map.get($light, 'accent-primary');
      box-shadow: 0 0 8px rgba(map.get($light, 'accent-primary'), 0.4);
    }
    
    /* Dark mode */
    .dark & {
      background-color: rgba(map.get($dark, 'accent-primary'), 0.7);
      
      &.dragging {
        background-color: map.get($dark, 'accent-primary');
        box-shadow: 0 0 8px rgba(map.get($dark, 'accent-primary'), 0.4);
      }
    }
  }
  
  /* Show resize handle on column hover */
  .ProseMirror .modern-table {
    th:hover .column-resize-handle {
      opacity: 0.6;
    }
    
    /* Subtle resize indicator on headers */
    th {
      position: relative;
      
      &:hover {
        background: rgba(map.get($light, 'accent-primary'), 0.05);
        
        .dark & {
          background: rgba(map.get($dark, 'accent-primary'), 0.07);
        }
      }
    }
  }
  
  /* Column highlighting script integration point */
  .ProseMirror table th[data-column] {
    position: relative;
    
    &:hover {
      /* This will be enhanced by JavaScript to highlight the entire column */
      z-index: 10;
    }
  }
  
  /* Empty table cell placeholder */
  .ProseMirror td.empty-cell:first-child::before {
    content: "";
    color: rgba(map.get($light, 'text-tertiary'), 0.5);
    pointer-events: none;
    
    .dark & {
      color: rgba(map.get($dark, 'text-tertiary'), 0.5);
    }
  }
}