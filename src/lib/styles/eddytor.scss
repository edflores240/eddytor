@use 'sass:map';
@use 'sass:color';
@use '_variables' as *;

:global(html) {
  height: 100%;
  font-family: $font-family-primary;
}

:global(body) {
  margin: 0;
  height: 100%;
  background: map.get($light, 'bg-primary');
  color: map.get($light, 'text-primary');
  transition: all $transition-slower;
  font-family: $font-family-primary;
  line-height: $line-height-normal;
}

:global(body.dark) {
  background: map.get($dark, 'bg-primary');
  color: map.get($dark, 'text-primary');
}

.eddytor-app {
  height: 100%;
  display: flex;
  flex-direction: column;
  background: map.get($light, 'bg-primary');
  transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1);

  &.dark {
    background: map.get($dark, 'bg-primary');
  }
 
  .theme-toggle-btn {
    position: fixed;
    top: $spacing-6;
    right: $spacing-6;
    z-index: $z-tooltip;
    display: flex;
    align-items: center;
    gap: $spacing-2;
    padding: $spacing-3 $spacing-5;
    background: rgba(map.get($light, 'bg-primary'), 0.9);
    color: map.get($light, 'text-primary');
    border: 1px solid map.get($light, 'border-medium');
    border-radius: $radius-xl;
    cursor: pointer;
    font-weight: $font-weight-medium;
    font-size: $font-size-sm;
    font-family: $font-family-primary;
    backdrop-filter: blur(8px);
    box-shadow: $shadow-md;
    transition: all $transition-base;
    
    &:hover {
      background: map.get($light, 'bg-primary');
      transform: translateY(-1px);
      box-shadow: $shadow-lg;
    }

    .toggle-icon {
      font-size: 1rem;
    }
  }

  &.dark .theme-toggle-btn {
    background: rgba(map.get($dark, 'bg-tertiary'), 0.9);
    color: map.get($dark, 'text-primary');
    border-color: map.get($dark, 'border-strong');

    &:hover {
      background: map.get($dark, 'bg-tertiary');
    }
  }
}

.editor-main {
  flex: 1;
  display: flex;
  justify-content: center;
  overflow: auto;
  height: 100%;
  padding: 0;
  margin: 0;
}

.editor-container {
  width: 100%;
  height: max-content;
  margin: 0;
  padding: 0;
}

.editor-wrapper {
  position: relative;
  height: 100%;
  min-height: 100vh;
  transition: all $transition-slower;
  overflow: hidden;

  @media (min-width: 768px) {
    margin: 2rem 1rem;
    min-height: calc(100vh - 4rem);
  }

  @media (max-width: 767px) {
    border-radius: 0;
    box-shadow: none;
    .dark & {
      box-shadow: none;
    }
  }
}

.title-section {
  padding: $spacing-12 $spacing-16 0;
  transition: border-color $transition-base;

  .dark & {
    border-bottom-color: map.get($dark, 'border-medium');
  }

  @media (max-width: 768px) {
    padding: 2rem 2rem 0;
  }
}

.editor-section {
  position: relative;
  padding-left: 60px; // Space for plus button
}

.editor {
  height: 100%;
  min-height: 60vh;
  outline: none;
  line-height: $line-height-relaxed;
  color: map.get($light, 'text-primary');
  font-size: $font-size-lg;
  font-family: $font-family-primary;
  transition: color $transition-base;
  padding: $spacing-12 $spacing-16;
  box-sizing: border-box;
  padding-left: 0; // Remove left padding since wrapper has it

  .dark & {
    color: map.get($dark, 'text-primary');
  }

  @media (max-width: 768px) {
    padding: 2rem 2rem;
    padding-left: 0;
    font-size: 1rem;
  }

  :global(h2) {
    font-size: $font-size-3xl;
    font-weight: $font-weight-semibold;
    line-height: 1.3;
    margin: $spacing-6 0 $spacing-4 0;
    color: map.get($light, 'text-primary');
    font-family: $font-family-heading;
    position: relative;
    
    :global(.dark) & {
      color: map.get($dark, 'text-primary');
    }

    &:hover {
      border-radius: $radius-lg;
      margin-left: -$spacing-4;
      margin-right: -$spacing-4;
      padding-left: $spacing-4;
      padding-right: $spacing-4;
    }
  }

  :global(h3) {
    font-size: $font-size-2xl;
    font-weight: $font-weight-semibold;
    line-height: 1.4;
    margin: $spacing-5 0 $spacing-3 0;
    color: map.get($light, 'text-primary');
    font-family: $font-family-heading;
    position: relative;
    
    :global(.dark) & {
      color: map.get($dark, 'text-primary');
    }

    &:hover {
      border-radius: $radius-lg;
      margin-left: -$spacing-4;
      margin-right: -$spacing-4;
      padding-left: $spacing-4;
      padding-right: $spacing-4;
    }
  }

  // Regular List styles
  :global(ul), :global(ol) {
    padding-left: 1.5rem;
    margin: 0.75rem 0;
    line-height: 1.6;
    
    // Nested lists
    :global(ul), :global(ol) {
      margin: 0.25rem 0;
    }
  }

  // Bullet list styles
  :global(ul) {
    list-style-type: disc;
    
    // First level of indentation
    :global(ul) {
      list-style-type: circle;
      
      // Second level of indentation
      :global(ul) {
        list-style-type: square;
        
        // Further levels (cycle back to circle)
        :global(ul) {
          list-style-type: circle;
          
          :global(ul) {
            list-style-type: square;
          }
        }
      }
    }
  }

  // Numbered list styles
  :global(ol) {
    list-style-type: decimal;
    
    // First level of indentation (lower alpha)
    :global(ol) {
      list-style-type: lower-alpha;
      
      // Second level of indentation (lower roman)
      :global(ol) {
        list-style-type: lower-roman;
        
        // Further levels (cycle back to lower alpha)
        :global(ol) {
          list-style-type: lower-alpha;
          
          :global(ol) {
            list-style-type: lower-roman;
          }
        }
      }
    }
  }

  // Regular list items
  :global(li) {
    margin: 0.25rem 0;
    position: relative;
    
    // Add some spacing between list items
    & + :global(li) {
      margin-top: 0.25rem;
    }
    
    // Nested lists should have less top margin
    > :global(ul), > :global(ol) {
      margin-top: 0.25rem;
      margin-bottom: 0.25rem;
    }
  }

  :global(.ProseMirror .checklist-content .pm-block :first-child) {
    margin: 0;
  }

// SCSS for checklist structure
:global {
  .checklist {
    list-style: none;
    padding-left: 0;
    margin: 8px 0;

    // Modern style for checked checklist items (excluding nested checklists)
    .checklist-item:has(> .checklist-checkbox-wrapper > .checklist-checkbox-input:checked) > .checklist-content {
      > p:first-child,
      > div:first-child:not(:has(.checklist)) {
        position: relative;
        opacity: 0.75;
        transition: opacity 0.2s ease, color 0.2s ease;
        color: map.get($light, 'text-tertiary');
        
        // Modern line-through effect using pseudo-element
        &::after {
          content: '';
          position: absolute;
          left: 0;
          top: 50%;
          width: 100%;
          height: 1px;
          background: linear-gradient(90deg, transparent, map.get($light, 'accent-primary') 15%, map.get($light, 'accent-primary') 85%, transparent);
          transform: scaleX(0.97);
          opacity: 0.5;
          pointer-events: none;
          animation: strikethrough 0.3s ease forwards;
        }
      }
    }
    
    // Animation for strike-through effect
    @keyframes strikethrough {
      from {
        transform: scaleX(0);
      }
      to {
        transform: scaleX(0.97);
      }
    }

    .checklist-item {
      display: flex;
      align-items: flex-start;
     
      margin-bottom: $spacing-2;
      padding: $spacing-1 0;
      position: relative;
    }
    
    // Wrapper to isolate checkbox interaction
    .checklist-checkbox-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      margin-top: $spacing-1; // Align with text better
      pointer-events: auto; // Explicitly enable pointer events
    }

    // Modern minimal checkbox container (label element)
    .checklist-checkbox-container {
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      width: $spacing-5;
      height: $spacing-5;
      min-width: $spacing-5;
      border: 1px solid map.get($light, 'border-light');
      border-radius: $radius-base;
      transition: all $transition-base;
      cursor: pointer;
      background: transparent;


   
      
      &:hover {
        border-color: map.get($light, 'accent-primary');
      }
      
      // Checkmark using ::after pseudo-element
      &::after {
        content: '';
        position: absolute;
        top: 3px;
        left: 6px;
        width: 5px;
        height: 9px;
        border: solid white;
        border-width: 0 2px 2px 0;
        transform: rotate(45deg) scale(0.8);
        opacity: 0;
        transition: all $transition-base;
      }
      
      &.checking::after {
        opacity: 1;
        animation: checkmark-appear 0.3s ease forwards;
      }

      
    }
    
    // The actual checkbox input
    .checklist-checkbox-input {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      cursor: pointer;
      z-index: 1;
      margin: 0;
      padding: 0;
    }
    
    // When checked, style the checkbox
    .checklist-checkbox-input:checked + .checklist-checkbox-container {
      background-color: map.get($light, 'accent-primary');
      border-color: map.get($light, 'accent-primary');
      box-shadow: $shadow-sm;
      
      &::after {
        opacity: 1;
        transform: rotate(45deg) scale(1);
      }


    }
    
    // Content area
    .checklist-content {
      flex: 1;
      min-width: 0;
      width: 100%;
      word-break: break-word;
      pointer-events: auto; // Allow text selection
      margin-left: $spacing-2; // Add some spacing from checkbox
      
      p, div {
        // margin: 0;
        // padding: 0;
  
        word-wrap: break-word;
        font-size: $font-size-base;
      }
      
      > * {
        margin-bottom: $spacing-2;
        
        &:last-child {
          margin-bottom: 0;
        }
      }
    }


    
    // Add class-based fallback for browsers that don't support :has
    .checklist-checkbox-input:checked {
      & + .checklist-checkbox-container + .checklist-content {
        p, div {
          text-decoration: line-through;
          color: map.get($light, 'text-tertiary');
          text-decoration-thickness: 1px;
          text-decoration-color: map.get($light, 'text-tertiary');
        }
      }
    }
  }

// Checkmark animation
@keyframes checkmark-appear {
  0% {
    opacity: 0;
    transform: rotate(45deg) scale(0.5);
  }
  50% {
    opacity: 1;
    transform: rotate(45deg) scale(1.2);
  }
  100% {
    opacity: 1;
    transform: rotate(45deg) scale(1);
  }
}

// Dark mode support
// @media (prefers-color-scheme: dark) {
//   .checklist {
//     .checklist-checkbox-container {
//       border-color: map.get($dark, 'border-medium');
      
//       &:hover {
//         border-color: map.get($dark, 'accent-primary');
//         background-color: rgba(map.get($dark, 'accent-primary'), 0.1);
//       }
//     }
    
//     .checklist-content p, 
//     .checklist-content div {
//       color: map.get($dark, 'text-primary');
//     }
    
//     // .checklist-checkbox-input:checked + .checklist-checkbox-container {
//     //   background-color: map.get($dark, 'accent-primary');
//     //   border-color: map.get($dark, 'accent-primary');
//     //   box-shadow: 0 0 0 1px rgba(map.get($dark, 'accent-primary'), 0.3);
//     // }
    
//     .checklist-checkbox-input:checked ~ .checklist-content p,
//     .checklist-checkbox-input:checked ~ .checklist-content div {
//       color: map.get($dark, 'text-tertiary');
//       text-decoration-color: map.get($dark, 'text-tertiary');
//     }
//   }
// }

// Focus management for accessibility
.checklist-checkbox-input:focus + .checklist-checkbox-container {
  box-shadow: 0 0 0 2px map.get($light, 'accent-primary');
  outline: none;
  border-color: map.get($light, 'accent-primary');
}

// Dark mode focus styles and checked items
@media (prefers-color-scheme: dark) {
  .checklist-checkbox-input:focus + .checklist-checkbox-container {
    box-shadow: 0 0 0 2px map.get($dark, 'accent-primary');
    border-color: map.get($dark, 'accent-primary');
  }
  
  // Dark mode strikethrough styling
  .checklist-item:has(> .checklist-checkbox-wrapper > .checklist-checkbox-input:checked) > .checklist-content {
    > p:first-child,
    > div:first-child:not(:has(.checklist)) {
      color: map.get($dark, 'text-tertiary');
      
      &::after {
        background: linear-gradient(90deg, transparent, map.get($dark, 'accent-primary') 15%, map.get($dark, 'accent-primary') 85%, transparent);
        opacity: 0.6;
      }
    }
  }
}

// Nested checklists support
.checklist .checklist {
  margin-left: 24px;
  margin-top: 8px;
  margin-bottom: 8px;
}

// When checklist is inside other content
.checklist-item .checklist-content {
  // Ensure proper spacing for nested block elements
  h1, h2, h3, h4, h5, h6 {
    margin-top: 0;
    margin-bottom: 8px;
  }
  
  ul, ol {
    margin-top: 4px;
    margin-bottom: 8px;
    padding-left: 24px;
  }
  
  blockquote {
    margin: 8px 0;
    padding-left: 16px;
    border-left: 3px solid #e5e7eb;
  }
  
  code {
    background-color: rgba(0, 0, 0, 0.05);
    padding: 2px 4px;
    border-radius: 3px;
    font-size: 0.9em;
  }
  
  pre {
    background-color: rgba(0, 0, 0, 0.05);
    padding: 12px;
    border-radius: 6px;
    overflow-x: auto;
    margin: 8px 0;
    
    code {
      background: none;
      padding: 0;
    }
  }
}

// Code blocks with syntax highlighting
:global {
  .code-block {
    background: map.get($light, 'bg-secondary');
    border: 1px solid map.get($light, 'border-light');
    border-radius: $radius-lg;
    padding: $spacing-4;
    margin: $spacing-4 0;
    overflow-x: auto;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: $font-size-sm;
    line-height: 1.5;
    position: relative;

    &[data-language]::before {
      content: attr(data-language);
      position: absolute;
      top: $spacing-2;
      right: $spacing-3;
      background: map.get($light, 'accent-primary');
      color: white;
      padding: $spacing-1 $spacing-2;
      border-radius: $radius-base;
      font-size: $font-size-xs;
      font-weight: $font-weight-medium;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      opacity: 0.8;
    }

    code {
      background: none;
      padding: 0;
      border-radius: 0;
      font-size: inherit;
      font-family: inherit;
      color: inherit;
    }

    // Syntax highlighting colors (Light theme)
    .hljs-comment,
    .hljs-quote {
      color: #6b7280;
      font-style: italic;
    }

    .hljs-keyword,
    .hljs-selector-tag,
    .hljs-built_in,
    .hljs-name,
    .hljs-tag {
      color: #7c3aed;
      font-weight: $font-weight-medium;
    }

    .hljs-string,
    .hljs-title,
    .hljs-section,
    .hljs-attribute,
    .hljs-literal,
    .hljs-template-tag,
    .hljs-template-variable,
    .hljs-type,
    .hljs-addition {
      color: #059669;
    }

    .hljs-number,
    .hljs-symbol,
    .hljs-bullet,
    .hljs-meta {
      color: #dc2626;
    }

    .hljs-function,
    .hljs-class .hljs-title {
      color: #2563eb;
      font-weight: $font-weight-medium;
    }

    .hljs-variable,
    .hljs-template-variable,
    .hljs-link,
    .hljs-selector-attr,
    .hljs-selector-pseudo {
      color: #d97706;
    }

    .hljs-deletion {
      background: #fee2e2;
    }

    .hljs-emphasis {
      font-style: italic;
    }

    .hljs-strong {
      font-weight: bold;
    }

    // Dark theme syntax highlighting
    :global(.dark) & {
      background: map.get($dark, 'bg-tertiary');
      border-color: map.get($dark, 'border-medium');

      &[data-language]::before {
        background: map.get($dark, 'accent-primary');
      }

      .hljs-comment,
      .hljs-quote {
        color: #9ca3af;
      }

      .hljs-keyword,
      .hljs-selector-tag,
      .hljs-built_in,
      .hljs-name,
      .hljs-tag {
        color: #a78bfa;
      }

      .hljs-string,
      .hljs-title,
      .hljs-section,
      .hljs-attribute,
      .hljs-literal,
      .hljs-template-tag,
      .hljs-template-variable,
      .hljs-type,
      .hljs-addition {
        color: #34d399;
      }

      .hljs-number,
      .hljs-symbol,
      .hljs-bullet,
      .hljs-meta {
        color: #f87171;
      }

      .hljs-function,
      .hljs-class .hljs-title {
        color: #60a5fa;
      }

      .hljs-variable,
      .hljs-template-variable,
      .hljs-link,
      .hljs-selector-attr,
      .hljs-selector-pseudo {
        color: #fbbf24;
      }

      .hljs-deletion {
        background: #450a0a;
      }
    }
  }
}

// Print styles
@media print {
  .checklist .checklist-item {
    .checklist-checkbox-container .checklist-checkbox-input {
      &:checked::after {
        border-color: black !important;
      }
    }
    
    &.checked .checklist-content {
      p, div {
        color: #666 !important;
      }
    }
  }
}

}


}