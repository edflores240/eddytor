@use 'sass:map';
@use 'sass:color';
@use '_variables' as *;

:global(html) {
  height: 100%;
  font-family: $font-family-primary;
}

:global(body) {
  margin: 0;
  height: 100%;
  background: map.get($light, 'bg-primary');
  color: map.get($light, 'text-primary');
  transition: all $transition-slower;
  font-family: $font-family-primary;
  line-height: $line-height-normal;
}

:global(body.dark) {
  background: map.get($dark, 'bg-primary');
  color: map.get($dark, 'text-primary');
}

.eddytor-app {
  height: 100%;
  display: flex;
  flex-direction: column;
  background: map.get($light, 'bg-primary');
  transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1);

  &.dark {
    background: map.get($dark, 'bg-primary');
  }
 
  .theme-toggle-btn {
    position: fixed;
    top: $spacing-6;
    right: $spacing-6;
    z-index: $z-tooltip;
    display: flex;
    align-items: center;
    gap: $spacing-2;
    padding: $spacing-3 $spacing-5;
    background: rgba(map.get($light, 'bg-primary'), 0.9);
    color: map.get($light, 'text-primary');
    border: 1px solid map.get($light, 'border-medium');
    border-radius: $radius-xl;
    cursor: pointer;
    font-weight: $font-weight-medium;
    font-size: $font-size-sm;
    font-family: $font-family-primary;
    backdrop-filter: blur(8px);
    box-shadow: $shadow-md;
    transition: all $transition-base;
    
    &:hover {
      background: map.get($light, 'bg-primary');
      transform: translateY(-1px);
      box-shadow: $shadow-lg;
    }

    .toggle-icon {
      font-size: 1rem;
    }
  }

  &.dark .theme-toggle-btn {
    background: rgba(map.get($dark, 'bg-tertiary'), 0.9);
    color: map.get($dark, 'text-primary');
    border-color: map.get($dark, 'border-strong');

    &:hover {
      background: map.get($dark, 'bg-tertiary');
    }
  }
}

.editor-main {
  flex: 1;
  display: flex;
  justify-content: center;
  overflow: auto;
  min-height: 100vh;
  padding: 0;
  margin: 0;
}

.editor-container {
  width: 100%;
  min-height: 100%;
  margin: 0;
  padding: 0;
}

.editor-wrapper {
  position: relative;
  height: 100%;
  min-height: 100vh;
  transition: all $transition-slower;
  overflow: hidden;

  @media (min-width: 768px) {
    margin: 2rem 1rem;
    min-height: calc(100vh - 4rem);
  }

  @media (max-width: 767px) {
    border-radius: 0;
    box-shadow: none;
    .dark & {
      box-shadow: none;
    }
  }
}

.title-section {
  padding: $spacing-12 $spacing-16 0;
  transition: border-color $transition-base;

  .dark & {
    border-bottom-color: map.get($dark, 'border-medium');
  }

  @media (max-width: 768px) {
    padding: 2rem 2rem 0;
  }
}

.editor-section {
  position: relative;
  padding-left: 60px; // Space for plus button
}

.editor {
  height: 100%;
  min-height: 60vh;
  outline: none;
  line-height: $line-height-relaxed;
  color: map.get($light, 'text-primary');
  font-size: $font-size-lg;
  font-family: $font-family-primary;
  transition: color $transition-base;
  padding: $spacing-12 $spacing-16;
  box-sizing: border-box;
  padding-left: 0; // Remove left padding since wrapper has it

  .dark & {
    color: map.get($dark, 'text-primary');
  }

  @media (max-width: 768px) {
    padding: 2rem 2rem;
    padding-left: 0;
    font-size: 1rem;
  }

  :global(h2) {
    font-size: $font-size-3xl;
    font-weight: $font-weight-semibold;
    line-height: 1.3;
    margin: $spacing-6 0 $spacing-4 0;
    color: map.get($light, 'text-primary');
    font-family: $font-family-heading;
    position: relative;
    
    :global(.dark) & {
      color: map.get($dark, 'text-primary');
    }

    &:hover {
      border-radius: $radius-lg;
      margin-left: -$spacing-4;
      margin-right: -$spacing-4;
      padding-left: $spacing-4;
      padding-right: $spacing-4;
    }
  }

  :global(h3) {
    font-size: $font-size-2xl;
    font-weight: $font-weight-semibold;
    line-height: 1.4;
    margin: $spacing-5 0 $spacing-3 0;
    color: map.get($light, 'text-primary');
    font-family: $font-family-heading;
    position: relative;
    
    :global(.dark) & {
      color: map.get($dark, 'text-primary');
    }

    &:hover {
      border-radius: $radius-lg;
      margin-left: -$spacing-4;
      margin-right: -$spacing-4;
      padding-left: $spacing-4;
      padding-right: $spacing-4;
    }
  }

  // Regular List styles
  :global(ul), :global(ol) {
    padding-left: 1.5rem;
    margin: 0.75rem 0;
    line-height: 1.6;
    
    // Nested lists
    :global(ul), :global(ol) {
      margin: 0.25rem 0;
    }
  }

  // Bullet list styles
  :global(ul) {
    list-style-type: disc;
    
    // First level of indentation
    :global(ul) {
      list-style-type: circle;
      
      // Second level of indentation
      :global(ul) {
        list-style-type: square;
        
        // Further levels (cycle back to circle)
        :global(ul) {
          list-style-type: circle;
          
          :global(ul) {
            list-style-type: square;
          }
        }
      }
    }
  }

  // Numbered list styles
  :global(ol) {
    list-style-type: decimal;
    
    // First level of indentation (lower alpha)
    :global(ol) {
      list-style-type: lower-alpha;
      
      // Second level of indentation (lower roman)
      :global(ol) {
        list-style-type: lower-roman;
        
        // Further levels (cycle back to lower alpha)
        :global(ol) {
          list-style-type: lower-alpha;
          
          :global(ol) {
            list-style-type: lower-roman;
          }
        }
      }
    }
  }

  // Regular list items
  :global(li) {
    margin: 0.25rem 0;
    position: relative;
    
    // Add some spacing between list items
    & + :global(li) {
      margin-top: 0.25rem;
    }
    
    // Nested lists should have less top margin
    > :global(ul), > :global(ol) {
      margin-top: 0.25rem;
      margin-bottom: 0.25rem;
    }
  }

  :global(.ProseMirror .checklist-content .pm-block :first-child) {
    margin: 0;
  }

  // Modern Checklist Styles
  :global(.checklist) {
    list-style: none;
    padding-left: 0;
    margin: 0.75rem 0;
  }
  
  // Nested checklists
  :global(.checklist .checklist) {
    margin: 0.25rem 0;
    padding-left: 1.5rem;
  }

  :global(.checklist-item) {
    display: flex;
    position: relative;
    margin: 0.5rem 0;
    padding: 0.25rem 0;
    border-radius: $radius-md;
    transition: all $transition-base;
    
    // &:hover {
    //   background: rgba(map.get($light, 'accent-primary'), 0.04);
      
    //   .dark & {
    //     background: rgba(map.get($dark, 'accent-primary'), 0.08);
    //   }
    // }
  }
  
  // Modern checkbox styling
  :global(.checklist-checkbox) {
    width: 1.1rem;
    height: 1.1rem;
    min-width: 1.1rem; // Prevent shrinking
    margin-right: 0rem;
    margin-top: 0.32rem; // Align with text baseline
    border: 2px solid rgba(map.get($light, 'border-strong'), 1);
    border-radius: 4px;
    background: white;
    cursor: pointer;
    transition: all 0.15s ease-in-out;
    position: relative;
    display: inline-block;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    
    &:hover {
      border-color: map.get($light, 'accent-primary');
      background: rgba(map.get($light, 'accent-primary'), 0.04);
    }

    &:active {
      transform: scale(0.92);
    }

    // Checkmark icon
    &::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0.6rem;
      height: 0.35rem;
      border: 2px solid white;
      border-top: 0;
      border-right: 0;
      transform: translate(-50%, -70%) rotate(-45deg) scale(0);
      opacity: 0;
      transition: all 0.15s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    // Checked state with modern, clean look
    &.checking {
      animation: checkbox-pulse 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      background: map.get($light, 'accent-primary');
      border-color: map.get($light, 'accent-primary');
      
      &::after {
        animation: checkmark-in 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
        opacity: 1;
      }
      
      .dark & {
        background: map.get($dark, 'accent-primary');
        border-color: map.get($dark, 'accent-primary');
      }
    }
    
    // Dark mode styling
    .dark & {
      border-color: rgba(map.get($dark, 'border-strong'), 0.6);
      background: rgba(map.get($dark, 'bg-secondary'), 0.7);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);
      
      &:hover {
        border-color: map.get($dark, 'accent-primary');
        background: rgba(map.get($dark, 'accent-primary'), 0.12);
      }
    }
  }

  // Content area with clean styling
  :global(.checklist-item .checklist-content) {
    flex: 1;
    min-width: 0; // Allow content to shrink
    line-height: 1.6;
    padding-left: 0.5rem;
    transition: all 0.2s ease-in-out;
  }
  
  // Modern checked item styling with subtle strikethrough
  :global(.checklist-item[data-checked="true"] .checklist-content) {
    color: rgba(map.get($light, 'text-muted'), 0.75);
    text-decoration: line-through;
    text-decoration-color: rgba(map.get($light, 'accent-primary'), 0.3);
    text-decoration-thickness: 1px;
    font-weight: 400;
    opacity: 0.85;
    transform: translateX(2px);
    transition: all 0.3s ease;
    
    .dark & {
      color: rgba(map.get($dark, 'text-muted'), 0.75);
      text-decoration-color: rgba(map.get($dark, 'accent-primary'), 0.3);
    }
  }
  
  // Checkbox checked state
  :global(.checklist-item[data-checked="true"] .checklist-checkbox) {
    background: map.get($light, 'accent-primary');
    border-color: map.get($light, 'accent-primary');
    box-shadow: 0 1px 3px rgba(map.get($light, 'accent-primary'), 0.3);
    
    &::after {
      transform: translate(-50%, -65%) rotate(-45deg) scale(1);
      opacity: 1;
    }
    
    .dark & {
      background: map.get($dark, 'accent-primary');
      border-color: map.get($dark, 'accent-primary');
      box-shadow: 0 1px 3px rgba(map.get($dark, 'accent-primary'), 0.4);
    }
  }
  // Nested checklist items
  :global(.checklist-item .checklist) {
    margin-top: 0.5rem;
    margin-left: 0;
  }

  // Animation for checking/unchecking - smoother, more modern animations
  @keyframes checkmark-in {
    0% {
      transform: translate(-50%, -65%) rotate(-45deg) scale(0);
      opacity: 0;
    }
    50% {
      opacity: 1;
      transform: translate(-50%, -65%) rotate(-45deg) scale(1.1);
    }
    100% {
      transform: translate(-50%, -65%) rotate(-45deg) scale(1);
      opacity: 1;
    }
  }

  @keyframes checkbox-pulse {
    0% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(map.get($light, 'accent-primary'), 0.3);
    }
    50% {
      transform: scale(1.05);
      box-shadow: 0 0 0 4px rgba(map.get($light, 'accent-primary'), 0.1);
    }
    100% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(map.get($light, 'accent-primary'), 0);
    }
  }
  
  @keyframes checkbox-bg-fill {
    0% {
      background-color: transparent;
    }
    100% {
      background-color: map.get($light, 'accent-primary');
    }
  }

  // Apply animations to the checkbox when checking
  :global(.checklist-checkbox.checking) {
    animation: checkbox-pulse 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards,
               checkbox-bg-fill 0.2s ease-out forwards;
    
    &::after {
      animation: checkmark-in 0.25s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
    }
    
    .dark & {
      animation: checkbox-pulse 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards,
                 checkbox-bg-fill 0.2s ease-out forwards;
    }
  }

  // Hover effect for the entire checklist item
  :global(.checklist-item:hover .checklist-checkbox) {
    border-color: map.get($light, 'accent-primary');
    
    .dark & {
      border-color: map.get($dark, 'accent-primary');
    }
  }

  // Focus-within for keyboard navigation
  :global(.checklist-item:focus-within) {
    background: rgba(map.get($light, 'accent-primary'), 0.05);
    border-radius: $radius-md;
    
    .dark & {
      background: rgba(map.get($dark, 'accent-primary'), 0.1);
    }
  }
    
  :global(.checklist-item:focus-within .checklist-checkbox) {
    box-shadow: 0 0 0 2px rgba(map.get($light, 'accent-primary'), 0.2);
    
    .dark & {
      box-shadow: 0 0 0 2px rgba(map.get($dark, 'accent-primary'), 0.3);
    }
  }

  // Text formatting styles
  :global(strong) {
    font-weight: $font-weight-semibold;
    color: map.get($light, 'text-primary');

    .dark & {
      color: map.get($dark, 'text-primary');
    }
  }

  :global(em) {
    font-style: italic;
    color: map.get($light, 'text-muted');

    .dark & {
      color: map.get($dark, 'text-muted');
    }
  }

  :global(code) {
    font-family: $font-family-mono;
    font-size: 0.875em;
    background: map.get($light, 'bg-tertiary');
    padding: $spacing-1 $spacing-2;
    border-radius: $radius-md;
    color: map.get($light, 'error');
    border: 1px solid map.get($light, 'border-medium');

    .dark & {
      background: map.get($dark, 'bg-secondary');
      color: map.get($dark, 'error');
      border-color: map.get($dark, 'border-strong');
    }
  }

  :global(blockquote) {
    margin: $spacing-6 0;
    padding: 0 $spacing-6;
    border-left: 4px solid map.get($light, 'accent-primary');
    color: map.get($light, 'text-muted');
    font-style: italic;
    position: relative;
    background: rgba(map.get($light, 'accent-primary'), 0.05);
    border-radius: 0 $radius-lg $radius-lg 0;
    padding: $spacing-4 $spacing-6;

    .dark & {
      border-left-color: map.get($dark, 'accent-primary');
      color: map.get($dark, 'text-muted');
      background: rgba(map.get($dark, 'accent-primary'), 0.1);
    }
  }

  // Enhanced selection styling
  :global(::selection) {
    background: rgba(map.get($light, 'accent-primary'), 0.2);
  }

  .dark & :global(::selection) {
    background: rgba(map.get($dark, 'accent-primary'), 0.3);
  }

  // Accessibility improvements
  @media (prefers-reduced-motion: reduce) {
    :global(.checklist-checkbox),
    :global(.checklist-item),
    :global(.checklist-content) {
      transition: none;
    }
    
    :global(.checklist-checkbox.checking::after),
    :global(.checklist-checkbox.unchecking::after) {
      animation: none;
    }
  }

  // High contrast mode support
  @media (prefers-contrast: high) {
    :global(.checklist-checkbox) {
      border-width: 3px;
      
      &.checked {
        background: black;
        border-color: black;
        
        .dark & {
          background: white;
          border-color: white;
          
          &::after {
            border-color: black;
          }
        }
      }
    }
  }
}